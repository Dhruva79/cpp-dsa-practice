//queue FIFO
//Circular queue
#include<iostream>
using namespace std;

class circularqueue {
private:
	int* arr;
	int front;
	int rear;
	int size;

public:
	//constructor
	circularqueue() {
		size = 1000;
		arr = new int[size];
		front = rear = -1;
	}
	//functions
	//push
	void push(int element) {
		//queue full
		if (front == 0 && rear == (size - 1) || front == (rear + 1) % size) {
			cout << "Queue overflow" << endl;
		}
		else if (front == -1) {  //Queue is empty, inserting 1st element
			front = rear = 0;
			arr[rear] = element;
		}
		else if (rear = size - 1 & front != 0) {   //rear is at end of queue and the front is not at the 0th index
			rear = 0;
			arr[rear] = element;
		}
		else {             // normal case
			rear++;
			arr[rear] = element;
		}
	}

	//pop
	void pop() {
		// empty queue
		if (front == -1) {
			cout << "Queue is empty" << endl;
		}
		//single element in queue
		int ans = arr[front];   //storing the value to be popped in ans, which is called at end
		if (front == rear) {   
			arr[front] = -1;
			front=rear=-1;
		}
		else if (front == size - 1) {
			front = 0;
		}
		else {
			front++;
		}
		
	}
};

int main() {

		return 0;
	}
