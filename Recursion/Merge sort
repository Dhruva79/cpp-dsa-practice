#include <iostream>
using namespace std;

void merge(int a[], int b[], int c[], int s, int e) {
    int mid = (s + e) / 2;
    int i = s;
    int j = mid + 1;
    int k = s;

    while (i <= mid && j <= e) {

        if (b[i] <= c[j]) {
            a[k++] = b[i++];
        }
        else {
            a[k++] = c[j++];
        }

    }
    while (i <= mid) {
        a[k++] = b[i++];
    }
    while (j <= e) {
        a[k++] = c[j++];
    }



}

void mergesort(int a[], int s, int e) {
    //base
    if (s >= e) {
        return;
    }


    //divide array
    int b[100];int c[100];
    int mid = (s + e) / 2;
    for (int x = s;x <= mid;x++) {
        b[x] = a[x];
    }
    for (int x = mid + 1;x <= e;x++) {
        c[x] = a[x];
    }
    //Recursion
    mergesort(b, s, mid);
    mergesort(c, mid+1, e);

    merge(a, b, c, s, e);


}


int main()
{
    int a[] = { 7,6,5,4,3,2,1 };
    int n = sizeof(a) / sizeof(int);
    cout << "Before" << endl;

    for (int i = 0; i < n; i++) {
         
        cout << a[i];
    }
    cout<< endl;
    mergesort(a, 0, n-1);
    cout << "After " << endl;
    for (int i = 0; i < n; i++) {
       
        cout << a[i];
    }
    return 0;


}
